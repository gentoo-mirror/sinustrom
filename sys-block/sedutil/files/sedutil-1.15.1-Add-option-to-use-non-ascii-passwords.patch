From 5484270087b5f5332e39396c1dab9d7179bd5b0c Mon Sep 17 00:00:00 2001
From: Alex <alex@ubi64.(none)>
Date: Sat, 18 Nov 2017 22:25:22 +0100
Subject: [PATCH 1/3] Add option to use non-ascii passwords

This is to allow proper '-h' (no password hashing) usage, where the user
might have saved the hash itself, or used a different hashing mechanism
altogether, and ends up with 0 bytes or control characters in the
resulting string.
---
 Common/DtaDev.h       |  1 +
 Common/DtaHashPwd.cpp | 48 +++++++++++++++++++++++++++++--------------
 Common/DtaHashPwd.h   |  4 ++--
 Common/DtaOptions.cpp |  7 ++++++-
 Common/DtaOptions.h   |  1 +
 Common/sedutil.cpp    |  2 ++
 6 files changed, 45 insertions(+), 18 deletions(-)

diff --git a/Common/DtaDev.h b/Common/DtaDev.h
index 473f7bd..9eabbb8 100644
--- a/Common/DtaDev.h
+++ b/Common/DtaDev.h
@@ -284,6 +284,7 @@ public:
 	/** return the communications ID to be used for sessions to this device */
 	virtual uint16_t comID() = 0;
 	bool no_hash_passwords; /** disables hashing of passwords */
+	bool hex_passwords; /** converts passwords from hex before using them */
 	sedutiloutput output_format; /** standard, readable, JSON */
 protected:
 	const char * dev;   /**< character string representing the device in the OS lexicon */
diff --git a/Common/DtaHashPwd.cpp b/Common/DtaHashPwd.cpp
index 1997393..d3b888a 100644
--- a/Common/DtaHashPwd.cpp
+++ b/Common/DtaHashPwd.cpp
@@ -32,8 +32,8 @@ extern "C" {
 }
 using namespace std;
 
-void DtaHashPassword(vector<uint8_t> &hash, char * password, vector<uint8_t> salt,
-	unsigned int iter, uint8_t hashsize)
+void DtaHashPassword(vector<uint8_t> &hash, const  vector<uint8_t>& password,
+    const vector<uint8_t>& salt, unsigned int iter, uint8_t hashsize)
 {
 	LOG(D1) << " Entered DtaHashPassword";
 	// if the hashsize can be > 255 the token overhead logic needs to be fixed
@@ -42,7 +42,7 @@ void DtaHashPassword(vector<uint8_t> &hash, char * password, vector<uint8_t> sal
 	
 	hash.clear();
 	// don't hash the devault OPAL password ''
-	if (0 == strnlen(password, 32)) {
+	if (0 == password.size()) {
 		goto exit;
 	}
 	hash.reserve(hashsize + 2); // hope this will prevent reallocation
@@ -50,7 +50,7 @@ void DtaHashPassword(vector<uint8_t> &hash, char * password, vector<uint8_t> sal
 		hash.push_back(' ');
 	}
 	
-	cf_pbkdf2_hmac((uint8_t *)password, strnlen(password, 256),
+	cf_pbkdf2_hmac(&password[0], password.size(),
 		salt.data(), salt.size(),
 		iter,
 		hash.data(), hash.size(),
@@ -67,21 +67,38 @@ void DtaHashPwd(vector<uint8_t> &hash, char * password, DtaDev * d)
 {
     LOG(D1) << " Entered DtaHashPwd";
     char *serNum;
+    vector<uint8_t> decoded_password;
+    if (d->hex_passwords)
+    {
+        for (char* p=password; *p; ++p)
+        {
+            uint8_t num1 = (uint8_t)(*p & 0x40 ? (*p & 0xf) + 9 : *p & 0xf);
+            ++p;
+            if (*p == 0)
+                break;
+            uint8_t num2 = (uint8_t)(*p & 0x40 ? (*p & 0xf) + 9 : *p & 0xf);
+            decoded_password.push_back(num1 * 16 + num2);
+        }
+    }
+    else
+    {
+        decoded_password.assign(password, password + strlen(password));
+    }
 
     if (d->no_hash_passwords) {
-        hash.clear();
-	for (uint16_t i = 0; i < strnlen(password, 32); i++)
-		hash.push_back(password[i]);
-	// add the token overhead
-	hash.insert(hash.begin(), (uint8_t)hash.size());
-	hash.insert(hash.begin(), 0xd0);
-	LOG(D1) << " Exit DtaHashPwd";
-	return;
+        if (decoded_password.size() > 32)
+            decoded_password.resize(32);
+        hash = decoded_password;
+        // add the token overhead
+        hash.insert(hash.begin(), (uint8_t)hash.size());
+        hash.insert(hash.begin(), 0xd0);
+        LOG(D1) << " Exit DtaHashPwd";
+        return;
     }
     serNum = d->getSerialNum();
     vector<uint8_t> salt(serNum, serNum + 20);
     //	vector<uint8_t> salt(DEFAULTSALT);
-    DtaHashPassword(hash, password, salt);
+    DtaHashPassword(hash, decoded_password, salt);
     LOG(D1) << " Exit DtaHashPwd"; // log for hash timing
 }
 
@@ -109,7 +126,7 @@ int testresult(std::vector<uint8_t> &result, const char * expected, size_t len)
 int Testsedutil(const PBKDF_TestTuple *testSet, unsigned int testSetSize)
 {
     int pass = 1;
-    std::vector<uint8_t> hash, seaSalt;
+    std::vector<uint8_t> hash, seaSalt, password;
 
     for (unsigned int i = 0; i < testSetSize; i++) {
         const PBKDF_TestTuple &tuple = testSet[i];
@@ -120,7 +137,8 @@ int Testsedutil(const PBKDF_TestTuple *testSet, unsigned int testSetSize)
         }
 		printf("Password %s Salt %s Iterations %i Length %i\n", (char *)tuple.Password,
 			(char *) tuple.Salt, tuple.iterations, tuple.hashlen);
-		DtaHashPassword(hash, (char *) tuple.Password, seaSalt, tuple.iterations, tuple.hashlen);
+        password.assign(tuple.Password, tuple.Password+strlen(tuple.Password));
+		DtaHashPassword(hash, password, seaSalt, tuple.iterations, tuple.hashlen);
 		int fail = (testresult(hash, tuple.hexDerivedKey, tuple.hashlen) == 0);
         pass = pass & fail;
     }
diff --git a/Common/DtaHashPwd.h b/Common/DtaHashPwd.h
index 3815f7c..2e28497 100644
--- a/Common/DtaHashPwd.h
+++ b/Common/DtaHashPwd.h
@@ -41,7 +41,7 @@ void DtaHashPwd(vector<uint8_t> &hash, char * password, DtaDev * device);
  * @param iter number of iterations to be preformed 
  * @param hashsize size of hash to be returned
  */
-void DtaHashPassword(vector<uint8_t> &hash, char * password, vector<uint8_t> salt,
-        unsigned int iter = 75000, uint8_t hashsize = 32);
+void DtaHashPassword(vector<uint8_t> &hash, const vector<uint8_t> &password,
+        const vector<uint8_t> &salt, unsigned int iter = 75000, uint8_t hashsize = 32);
 /** Test the hshing function using publicly available test cased and report */
 int TestPBKDF2();
diff --git a/Common/DtaOptions.cpp b/Common/DtaOptions.cpp
index a80be93..4a36639 100644
--- a/Common/DtaOptions.cpp
+++ b/Common/DtaOptions.cpp
@@ -27,10 +27,11 @@ void usage()
     printf("a utility to manage self encrypting drives that conform\n");
     printf("to the Trusted Computing Group OPAL 2.0 SSC specification\n");
     printf("General Usage:                     (see readme for extended commandset)\n");
-    printf("sedutil-cli <-v> <-n> <action> <options> <device>\n");
+    printf("sedutil-cli <-v> <-n> <-x> <action> <options> <device>\n");
     printf("-v (optional)                       increase verbosity, one to five v's\n");
     printf("-n (optional)                       no password hashing. Passwords will be sent in clear text!\n");
     printf("-l (optional)                       log style output to stderr only\n");
+    printf("-x (optional)                       password inputs are in hex form\n");
     printf("actions \n");
     printf("--scan \n");
     printf("                                Scans the devices on the system \n");
@@ -139,6 +140,10 @@ uint8_t DtaOptions(int argc, char * argv[], DTA_OPTIONS * opts)
 			opts->output_format = sedutilNormal;
 			outputFormat = sedutilNormal;
 		}
+		else if (!strcmp("-x", argv[i])) {
+			baseOptions += 1;
+            opts->hex_passwords = true;
+		}
 		else if (!(('-' == argv[i][0]) && ('-' == argv[i][1])) && 
 			(0 == opts->action))
 		{
diff --git a/Common/DtaOptions.h b/Common/DtaOptions.h
index c012af1..286b3f8 100644
--- a/Common/DtaOptions.h
+++ b/Common/DtaOptions.h
@@ -43,6 +43,7 @@ typedef struct _DTA_OPTIONS {
 	uint8_t lrlength;		/** the length in blocks of a lockingrange */
 
 	bool no_hash_passwords; /** global parameter, disables hashing of passwords */
+    bool hex_passwords; /** global parameter, all incoming passwords are treated as hex-encoded */
 	sedutiloutput output_format;
 } DTA_OPTIONS;
 /** Print a usage message */
diff --git a/Common/sedutil.cpp b/Common/sedutil.cpp
index fe6df19..9a5c0f3 100644
--- a/Common/sedutil.cpp
+++ b/Common/sedutil.cpp
@@ -93,6 +93,8 @@ int main(int argc, char * argv[])
 		// make sure DtaDev::no_hash_passwords is initialized
 		d->no_hash_passwords = opts.no_hash_passwords;
 
+		d->hex_passwords = opts.hex_passwords;
+
 		d->output_format = opts.output_format;
 	}
 
-- 
2.30.0

