From 69a2a4dbaa4ce392336365d67ece669ac6777b36 Mon Sep 17 00:00:00 2001
From: Alex <alex@ubi64.(none)>
Date: Sat, 18 Nov 2017 22:51:21 +0100
Subject: [PATCH 2/3] Option to print the password hash

Useful for users, who want to use different utilities with their SED
drives, and also in combination  with "-x -n", meaning "no hash", "hex",
so no plaintext passwords are saved to scripts or shell history.
---
 Common/DtaDev.cpp     | 19 +++++++++++++++++++
 Common/DtaDev.h       |  3 +++
 Common/DtaOptions.cpp |  7 +++++++
 Common/DtaOptions.h   |  1 +
 Common/sedutil.cpp    |  4 ++++
 5 files changed, 34 insertions(+)

diff --git a/Common/DtaDev.cpp b/Common/DtaDev.cpp
index 0dbc3b1..30e4930 100644
--- a/Common/DtaDev.cpp
+++ b/Common/DtaDev.cpp
@@ -32,6 +32,7 @@ along with sedutil.  If not, see <http://www.gnu.org/licenses/>.
 #include "DtaConstants.h"
 #include "DtaEndianFixup.h"
 #include "DtaHexDump.h"
+#include "DtaHashPwd.h"
 
 using namespace std;
 
@@ -211,6 +212,24 @@ void DtaDev::discovery0()
     while (cpos < epos);
 
 }
+
+uint8_t DtaDev::printPasswordHash(char * password)
+{
+    LOG(D1) << "Entering DtaDev::printPasswordHash()";
+    vector<uint8_t> hash;
+    DtaHashPwd(hash, password, this);
+
+    /* std::hex overwrites flags; save them, so we do not alter other output later */
+    ios_base::fmtflags saved_flags = cout.flags();
+
+    /* First two bytes are actually the opal header */
+    for (size_t i = 2; i < hash.size(); ++i)
+        cout << hex << setfill('0') << setw(2) << (int)hash[i];
+    cout << endl;
+    cout.flags(saved_flags);
+    return 0;
+}
+
 void DtaDev::puke()
 {
 	LOG(D1) << "Entering DtaDev::puke()";
diff --git a/Common/DtaDev.h b/Common/DtaDev.h
index 9eabbb8..9a69d88 100644
--- a/Common/DtaDev.h
+++ b/Common/DtaDev.h
@@ -74,6 +74,9 @@ public:
 	 */
 	void discovery0();
 
+	/** Print password hash, computed with this device's serial number
+	 */
+	uint8_t printPasswordHash(char * password);
 	/*
 	 * virtual methods required in the OS specific
 	 * device class
diff --git a/Common/DtaOptions.cpp b/Common/DtaOptions.cpp
index 4a36639..20fc241 100644
--- a/Common/DtaOptions.cpp
+++ b/Common/DtaOptions.cpp
@@ -96,6 +96,9 @@ void usage()
     printf("                                revert the device using the PSID *ERASING* *ALL* the data \n");
     printf("--printDefaultPassword <device>\n");
     printf("                                print MSID \n");
+    printf("--printPasswordHash <password> <device>\n");
+    printf("                                print the hash of the password \n");
+    printf("                                as computed by sedutil. Hex-ecoded.\n");
     printf("\n");
     printf("Examples \n");
     printf("sedutil-cli --scan \n");
@@ -515,6 +518,10 @@ uint8_t DtaOptions(int argc, char * argv[], DTA_OPTIONS * opts)
 			END_OPTION
 		BEGIN_OPTION(objDump, 5) i += 4; OPTION_IS(device) END_OPTION
         BEGIN_OPTION(printDefaultPassword, 1) OPTION_IS(device) END_OPTION
+        BEGIN_OPTION(printPasswordHash, 2)
+            OPTION_IS(password)
+            OPTION_IS(device)
+        END_OPTION
 		BEGIN_OPTION(rawCmd, 7) i += 6; OPTION_IS(device) END_OPTION
 		else {
             LOG(E) << "Invalid command line argument " << argv[i];
diff --git a/Common/DtaOptions.h b/Common/DtaOptions.h
index 286b3f8..715b75b 100644
--- a/Common/DtaOptions.h
+++ b/Common/DtaOptions.h
@@ -96,6 +96,7 @@ typedef enum _sedutiloption {
 	validatePBKDF2,
 	objDump,
     printDefaultPassword,
+    printPasswordHash,
 	rawCmd,
 
 } sedutiloption;
diff --git a/Common/sedutil.cpp b/Common/sedutil.cpp
index 9a5c0f3..c354d78 100644
--- a/Common/sedutil.cpp
+++ b/Common/sedutil.cpp
@@ -261,6 +261,10 @@ int main(int argc, char * argv[])
 		LOG(D) << "print default password";
         return d->printDefaultPassword();
         break;
+    case sedutiloption::printPasswordHash:
+		LOG(D) << "print password hash";
+        return d->printPasswordHash(argv[opts.password]);
+        break;
 	case sedutiloption::rawCmd:
 		LOG(D) << "Performing cmdDump ";
 		return d->rawCmd(argv[argc - 7], argv[argc - 6], argv[argc - 5], argv[argc - 4], argv[argc - 3], argv[argc - 2]);
-- 
2.30.0

